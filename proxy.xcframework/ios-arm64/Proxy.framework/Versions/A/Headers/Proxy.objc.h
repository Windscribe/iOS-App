// Objective-C API for talking to wstunnel/proxy Go package.
//   gobind -lang=objc wstunnel/proxy
//
// File is generated by gobind. Do not edit.

#ifndef __Proxy_H__
#define __Proxy_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class ProxyStunnelBiDirection;
@class ProxyWebSocketBiDirection;
@protocol ProxyRunner;
@class ProxyRunner;
@protocol ProxyTunnelCallBack;
@class ProxyTunnelCallBack;

@protocol ProxyRunner <NSObject>
- (BOOL)run:(NSError* _Nullable* _Nullable)error;
@end

@protocol ProxyTunnelCallBack <NSObject>
/**
 * Protect remote connection's underlying file descriptor sent to host app for protecting it from VPN Service.
 */
- (void)protect:(long)fd;
@end

/**
 * StunnelBiDirection
creates an object to transfer data between the TCP clients and remote server in bidirectional way
 */
@interface ProxyStunnelBiDirection : NSObject <goSeqRefInterface, ProxyRunner> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (BOOL)run:(NSError* _Nullable* _Nullable)error;
@end

/**
 * WebSocketBiDirection
Creates an object to transfer data between the TCP clients and remote server in bidirectional way
 */
@interface ProxyWebSocketBiDirection : NSObject <goSeqRefInterface, ProxyRunner> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (BOOL)run:(NSError* _Nullable* _Nullable)error;
@end

/**
 * BufferSize is the size of the intermediate buffer for network packets
 */
FOUNDATION_EXPORT const int64_t ProxyBufferSize;
/**
 * Stunnel wraps OpenVPN tcp traffic in to regular tcp.
 */
FOUNDATION_EXPORT const int64_t ProxyStunnel;
/**
 * WSTunnel wraps OpenVPN tcp traffic in to Websocket
 */
FOUNDATION_EXPORT const int64_t ProxyWSTunnel;

@interface Proxy : NSObject
// skipped variable Logger with unsupported type: *go.uber.org/zap.SugaredLogger

@end

/**
 * InitLogger Log output is saved to the app provided log file.
 */
FOUNDATION_EXPORT void ProxyInitLogger(BOOL development, NSString* _Nullable logFilePath);

FOUNDATION_EXPORT void ProxyInitialise(BOOL development, NSString* _Nullable logFilePath);

// skipped function NewBidirConnection with unsupported parameter or return types


// skipped function NewHTTPClient with unsupported parameter or return types


// skipped function NewStunnelBiDirection with unsupported parameter or return types


/**
 * RegisterTunnelCallback is called from the host app to register for events from library.
 */
FOUNDATION_EXPORT void ProxyRegisterTunnelCallback(id<ProxyTunnelCallBack> _Nullable callback);

/**
 * StartProxy Builds and start a http client (Tcp server + Handles Bi directional connection between clients and remote server)
This Function blocks until exit signal is sent by host app.
listenAddress = ":LocalPort"
remoteAddress = "wss://ip:port/path" or "ip:port"
tunnelType = WSTunnel = 1 or Stunnel = 2
 */
FOUNDATION_EXPORT BOOL ProxyStartProxy(NSString* _Nullable listenAddress, NSString* _Nullable remoteAddress, long tunnelType, long mtu, BOOL extraPadding);

@class ProxyRunner;

@class ProxyTunnelCallBack;

/**
 * Runner defines a basic interface with only a Run() function
 */
@interface ProxyRunner : NSObject <goSeqRefInterface, ProxyRunner> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)run:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TunnelCallBack Host app should implement this interface and register.
 */
@interface ProxyTunnelCallBack : NSObject <goSeqRefInterface, ProxyTunnelCallBack> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Protect remote connection's underlying file descriptor sent to host app for protecting it from VPN Service.
 */
- (void)protect:(long)fd;
@end

#endif
